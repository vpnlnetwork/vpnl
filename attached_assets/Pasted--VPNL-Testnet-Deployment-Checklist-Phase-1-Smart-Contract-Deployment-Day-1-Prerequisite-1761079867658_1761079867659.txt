# VPNL Testnet Deployment Checklist

## Phase 1: Smart Contract Deployment (Day 1)

### Prerequisites Setup

- [ ] **Environment Configuration**
  
  ```bash
  # Create .env file
  ARBITRUM_SEPOLIA_RPC_URL=https://sepolia-rollup.arbitrum.io/rpc
  PRIVATE_KEY=your_deployment_key
  ARBISCAN_API_KEY=your_arbiscan_key
  ```
- [ ] **Get Testnet ETH**
  - Arbitrum Sepolia Faucet: <https://faucet.quicknode.com/arbitrum/sepolia>
  - Or: <https://www.alchemy.com/faucets/arbitrum-sepolia>
  - Need ~0.1 ETH for deployment + operations
- [ ] **Install Dependencies**
  
  ```bash
  npm install --save-dev hardhat @nomicfoundation/hardhat-toolbox
  npm install @openzeppelin/contracts
  ```

### Hardhat Configuration

- [ ] **Create/Update `hardhat.config.js`**
  
  ```javascript
  require("@nomicfoundation/hardhat-toolbox");
  require("dotenv").config();
  
  module.exports = {
    solidity: {
      version: "0.8.20",
      settings: {
        optimizer: {
          enabled: true,
          runs: 200
        }
      }
    },
    networks: {
      arbitrumSepolia: {
        url: process.env.ARBITRUM_SEPOLIA_RPC_URL,
        accounts: [process.env.PRIVATE_KEY],
        chainId: 421614
      }
    },
    etherscan: {
      apiKey: {
        arbitrumSepolia: process.env.ARBISCAN_API_KEY
      },
      customChains: [
        {
          network: "arbitrumSepolia",
          chainId: 421614,
          urls: {
            apiURL: "https://api-sepolia.arbiscan.io/api",
            browserURL: "https://sepolia.arbiscan.io"
          }
        }
      ]
    }
  };
  ```

### Deployment Script

- [ ] **Create `scripts/deploy.js`**
  
  ```javascript
  const hre = require("hardhat");
  
  async function main() {
    console.log("Deploying VPNLRegistry to Arbitrum Sepolia...");
    
    const [deployer] = await hre.ethers.getSigners();
    console.log("Deploying with account:", deployer.address);
    console.log("Account balance:", (await deployer.provider.getBalance(deployer.address)).toString());
  
    // Deploy VPNLRegistry
    const VPNLRegistry = await hre.ethers.getContractFactory("VPNLRegistry");
    const verifier = deployer.address; // Initially use deployer as verifier
    const registry = await VPNLRegistry.deploy(verifier);
  
    await registry.waitForDeployment();
    const registryAddress = await registry.getAddress();
  
    console.log("✅ VPNLRegistry deployed to:", registryAddress);
    console.log("Verifier address:", verifier);
    
    // Save deployment info
    const fs = require('fs');
    const deploymentInfo = {
      network: "arbitrum-sepolia",
      registry: registryAddress,
      verifier: verifier,
      deployer: deployer.address,
      timestamp: new Date().toISOString(),
      blockNumber: await hre.ethers.provider.getBlockNumber()
    };
    
    fs.writeFileSync(
      'deployments/arbitrum-sepolia.json',
      JSON.stringify(deploymentInfo, null, 2)
    );
    
    console.log("\n⏳ Waiting 30 seconds before verification...");
    await new Promise(resolve => setTimeout(resolve, 30000));
    
    // Verify contract
    try {
      await hre.run("verify:verify", {
        address: registryAddress,
        constructorArguments: [verifier],
      });
      console.log("✅ Contract verified on Arbiscan");
    } catch (error) {
      console.log("⚠️  Verification failed:", error.message);
      console.log("You can verify manually later with:");
      console.log(`npx hardhat verify --network arbitrumSepolia ${registryAddress} ${verifier}`);
    }
  }
  
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
  ```
- [ ] **Create deployment directory**
  
  ```bash
  mkdir -p deployments
  ```

### Deploy Contract

- [ ] **Run deployment**
  
  ```bash
  npx hardhat run scripts/deploy.js --network arbitrumSepolia
  ```
- [ ] **Verify if auto-verification failed**
  
  ```bash
  npx hardhat verify --network arbitrumSepolia <CONTRACT_ADDRESS> <VERIFIER_ADDRESS>
  ```
- [ ] **Test basic functions**
  
  ```bash
  npx hardhat console --network arbitrumSepolia
  ```
  
  ```javascript
  const registry = await ethers.getContractAt("VPNLRegistry", "<CONTRACT_ADDRESS>");
  await registry.verifier(); // Should return your address
  ```

-----

## Phase 2: Test Data Creation (Day 1-2)

### Create Mock Verifications

- [ ] **Create `scripts/populate-testdata.js`**
  
  ```javascript
  const hre = require("hardhat");
  
  async function main() {
    const registryAddress = "YOUR_DEPLOYED_ADDRESS";
    const registry = await hre.ethers.getContractAt("VPNLRegistry", registryAddress);
    
    // Mock solver addresses (you can use any addresses for demo)
    const mockSolvers = [
      {
        address: "0x1234567890123456789012345678901234567890",
        name: "Expert Solver A",
        score: 0.85,
        tier: "Expert"
      },
      {
        address: "0x2345678901234567890123456789012345678901",
        name: "Advanced Solver B",
        score: 0.65,
        tier: "Advanced"
      },
      {
        address: "0x3456789012345678901234567890123456789012",
        name: "Emerging Solver C",
        score: 0.30,
        tier: "Emerging"
      }
    ];
  
    console.log("Creating mock verifications...\n");
  
    for (const solver of mockSolvers) {
      // Generate commitment hash
      const scoreStr = (solver.score * 1000).toString(); // Convert to 0-1000 scale
      const salt = hre.ethers.randomBytes(32);
      const metadata = hre.ethers.encodeBytes32String(solver.tier);
      
      const commitment = hre.ethers.keccak256(
        hre.ethers.AbiCoder.defaultAbiCoder().encode(
          ["uint256", "bytes32", "bytes32"],
          [scoreStr, salt, metadata]
        )
      );
  
      // Set expiration to 180 days from now
      const expiresAt = Math.floor(Date.now() / 1000) + (180 * 24 * 60 * 60);
  
      console.log(`Verifying ${solver.name}...`);
      console.log(`  Address: ${solver.address}`);
      console.log(`  Score: ${solver.score} (${solver.tier})`);
      console.log(`  Commitment: ${commitment}`);
  
      const tx = await registry.verify(solver.address, commitment, expiresAt);
      await tx.wait();
      
      console.log(`  ✅ Transaction: ${tx.hash}\n`);
    }
  
    console.log("✅ All mock verifications created!");
    console.log("\nYou can query them at:");
    console.log(`https://sepolia.arbiscan.io/address/${registryAddress}`);
  }
  
  main()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error(error);
      process.exit(1);
    });
  ```
- [ ] **Run test data creation**
  
  ```bash
  npx hardhat run scripts/populate-testdata.js --network arbitrumSepolia
  ```

-----

## Phase 3: Basic Frontend Demo (Day 2-3)

### Setup React App

- [ ] **Create demo frontend**
  
  ```bash
  npx create-react-app vpnl-demo
  cd vpnl-demo
  npm install ethers@^6
  ```
- [ ] **Create minimal demo (replace `src/App.js`)**
  
  ```javascript
  import { useState } from 'react';
  import { ethers } from 'ethers';
  import './App.css';
  
  const REGISTRY_ADDRESS = "YOUR_DEPLOYED_ADDRESS";
  const REGISTRY_ABI = [
    "function isVerified(address solver) view returns (bool)",
    "function getVerification(address solver) view returns (bytes32, uint256, uint256, bool, bool, string)"
  ];
  
  function App() {
    const [solverAddress, setSolverAddress] = useState('');
    const [verification, setVerification] = useState(null);
    const [loading, setLoading] = useState(false);
  
    const mockSolvers = [
      { address: "0x1234567890123456789012345678901234567890", name: "Expert Solver A" },
      { address: "0x2345678901234567890123456789012345678901", name: "Advanced Solver B" },
      { address: "0x3456789012345678901234567890123456789012", name: "Emerging Solver C" }
    ];
  
    async function queryVerification() {
      setLoading(true);
      try {
        const provider = new ethers.JsonRpcProvider("https://sepolia-rollup.arbitrum.io/rpc");
        const registry = new ethers.Contract(REGISTRY_ADDRESS, REGISTRY_ABI, provider);
        
        const isVerified = await registry.isVerified(solverAddress);
        const details = await registry.getVerification(solverAddress);
        
        setVerification({
          isVerified,
          commitmentHash: details[0],
          verifiedAt: new Date(Number(details[1]) * 1000).toLocaleString(),
          expiresAt: new Date(Number(details[2]) * 1000).toLocaleString(),
          active: details[3],
          revoked: details[4]
        });
      } catch (error) {
        console.error(error);
        alert("Error querying verification");
      }
      setLoading(false);
    }
  
    return (
      <div className="App">
        <header className="App-header">
          <h1>VPNL Demo - Testnet</h1>
          <p>Query solver reputation on Arbitrum Sepolia</p>
        </header>
  
        <div className="demo-container">
          <div className="query-section">
            <h2>Query Solver Verification</h2>
            
            <div className="mock-solvers">
              <p><strong>Mock Test Solvers:</strong></p>
              {mockSolvers.map(solver => (
                <button 
                  key={solver.address}
                  onClick={() => setSolverAddress(solver.address)}
                  className="mock-button"
                >
                  {solver.name}
                </button>
              ))}
            </div>
  
            <input
              type="text"
              placeholder="Solver Address (0x...)"
              value={solverAddress}
              onChange={(e) => setSolverAddress(e.target.value)}
              className="address-input"
            />
            
            <button 
              onClick={queryVerification} 
              disabled={loading || !solverAddress}
              className="query-button"
            >
              {loading ? 'Querying...' : 'Query Verification'}
            </button>
          </div>
  
          {verification && (
            <div className="results-section">
              <h3>Verification Results</h3>
              <div className={`status ${verification.isVerified ? 'verified' : 'unverified'}`}>
                {verification.isVerified ? '✅ VERIFIED' : '❌ NOT VERIFIED'}
              </div>
              
              <div className="details">
                <p><strong>Commitment Hash:</strong><br/>{verification.commitmentHash}</p>
                <p><strong>Verified At:</strong> {verification.verifiedAt}</p>
                <p><strong>Expires At:</strong> {verification.expiresAt}</p>
                <p><strong>Active:</strong> {verification.active ? 'Yes' : 'No'}</p>
                <p><strong>Revoked:</strong> {verification.revoked ? 'Yes' : 'No'}</p>
              </div>
            </div>
          )}
  
          <div className="info-section">
            <h3>Network Info</h3>
            <p><strong>Chain:</strong> Arbitrum Sepolia (Testnet)</p>
            <p><strong>Registry:</strong> <a 
              href={`https://sepolia.arbiscan.io/address/${REGISTRY_ADDRESS}`}
              target="_blank"
              rel="noopener noreferrer"
            >
              {REGISTRY_ADDRESS}
            </a></p>
          </div>
        </div>
      </div>
    );
  }
  
  export default App;
  ```
- [ ] **Add basic styling (`src/App.css`)**
  
  ```css
  .App {
    text-align: center;
    min-height: 100vh;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 20px;
  }
  
  .App-header {
    color: white;
    margin-bottom: 40px;
  }
  
  .demo-container {
    max-width: 800px;
    margin: 0 auto;
    background: white;
    border-radius: 12px;
    padding: 30px;
    box-shadow: 0 10px 40px rgba(0,0,0,0.2);
  }
  
  .query-section {
    margin-bottom: 30px;
  }
  
  .mock-solvers {
    background: #f7f7f7;
    padding: 15px;
    border-radius: 8px;
    margin: 20px 0;
  }
  
  .mock-button {
    margin: 5px;
    padding: 8px 16px;
    background: #667eea;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
  }
  
  .mock-button:hover {
    background: #5568d3;
  }
  
  .address-input {
    width: 100%;
    padding: 12px;
    font-size: 16px;
    border: 2px solid #ddd;
    border-radius: 8px;
    margin: 15px 0;
    font-family: monospace;
  }
  
  .query-button {
    padding: 12px 30px;
    background: #10b981;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    font-weight: bold;
  }
  
  .query-button:hover:not(:disabled) {
    background: #059669;
  }
  
  .query-button:disabled {
    background: #ccc;
    cursor: not-allowed;
  }
  
  .results-section {
    margin-top: 30px;
    padding: 20px;
    background: #f9fafb;
    border-radius: 8px;
  }
  
  .status {
    font-size: 24px;
    font-weight: bold;
    padding: 15px;
    border-radius: 8px;
    margin: 15px 0;
  }
  
  .status.verified {
    background: #d1fae5;
    color: #065f46;
  }
  
  .status.unverified {
    background: #fee2e2;
    color: #991b1b;
  }
  
  .details {
    text-align: left;
    background: white;
    padding: 20px;
    border-radius: 8px;
  }
  
  .details p {
    margin: 10px 0;
    word-break: break-all;
  }
  
  .info-section {
    margin-top: 30px;
    padding: 20px;
    background: #eff6ff;
    border-radius: 8px;
  }
  
  .info-section a {
    color: #2563eb;
    text-decoration: none;
  }
  
  .info-section a:hover {
    text-decoration: underline;
  }
  ```
- [ ] **Test locally**
  
  ```bash
  npm start
  ```

-----

## Phase 4: Deployment & Documentation (Day 3)

### Deploy Demo Site

- [ ] **Option A: Vercel (Recommended)**
  
  ```bash
  npm install -g vercel
  vercel login
  vercel --prod
  ```
- [ ] **Option B: Netlify**
  
  ```bash
  npm run build
  # Drag and drop /build folder to netlify.com/drop
  ```
- [ ] **Option C: GitHub Pages**
  
  ```bash
  npm install --save-dev gh-pages
  # Add to package.json:
  # "homepage": "https://yourusername.github.io/vpnl-demo"
  # "predeploy": "npm run build"
  # "deploy": "gh-pages -d build"
  npm run deploy
  ```

### Update Documentation

- [ ] **Create `DEMO.md` in root**
  
  ```markdown
  # VPNL Testnet Demo
  
  ## Live Demo
  🌐 **Frontend:** https://your-demo-url.vercel.app
  
  ## Deployed Contracts
  
  ### Arbitrum Sepolia
  - **VPNLRegistry:** `0xYOUR_ADDRESS`
  - **Arbiscan:** https://sepolia.arbiscan.io/address/0xYOUR_ADDRESS
  - **Deployer:** `0xYOUR_DEPLOYER`
  - **Verifier:** `0xYOUR_VERIFIER`
  
  ## Test Solvers
  
  You can query these pre-verified test addresses:
  
  | Address | Tier | Score | Commitment Hash |
  |---------|------|-------|-----------------|
  | `0x1234...` | Expert | 0.85 | `0xabc...` |
  | `0x2345...` | Advanced | 0.65 | `0xdef...` |
  | `0x3456...` | Emerging | 0.30 | `0x123...` |
  
  ## How to Test
  
  1. Visit the demo site
  2. Click a mock solver button or enter any address
  3. Click "Query Verification"
  4. View the on-chain verification status
  
  ## Technical Details
  
  **Network:** Arbitrum Sepolia (Chain ID: 421614)  
  **RPC:** https://sepolia-rollup.arbitrum.io/rpc  
  **Verification Period:** 180 days  
  **Contract Version:** 0.8.20
  
  ## For Developers
  
  Query the registry directly:
  
  ```javascript
  const registry = new ethers.Contract(
    "0xYOUR_ADDRESS",
    ["function isVerified(address) view returns (bool)"],
    provider
  );
  
  const isVerified = await registry.isVerified("0xSOLVER_ADDRESS");
  ```
  
  ## Next Steps
  - [ ] Mainnet deployment (pending audit - Phase 1 goal)
  - [ ] TypeScript SDK release
  - [ ] The Graph subgraph
  - [ ] Production API
  
  ```
  
  ```
- [ ] **Update main README.md**
  Add section after “Quick Start”:
  
  ```markdown
  ## 🎯 Live Testnet Demo
  
  **Try it now:** [VPNL Demo on Arbitrum Sepolia](https://your-demo-url.vercel.app)
  
  Explore the deployed registry contract and query mock solver verifications:
  - Contract: [View on Arbiscan](https://sepolia.arbiscan.io/address/0xYOUR_ADDRESS)
  - See [DEMO.md](DEMO.md) for technical details
  ```

-----

## Phase 5: Create Video Walkthrough (Day 3-4)

### Record Demo Video

- [ ] **Use Loom (loom.com) - Free tier is fine**
- [ ] **Video Script (5-7 minutes):**

1. **Introduction (30s)**

- “Hi, I’m Maggie, creator of VPNL”
- “This is a live testnet demo of our reputation registry”

1. **Problem Statement (1min)**

- Show the trilemma slide from whitepaper
- “Current intent protocols can’t achieve all three…”

1. **Architecture Overview (1min)**

- Screen share the architecture.md diagram
- “VPNL has three layers…”

1. **Live Demo (2-3min)**

- Open the deployed demo site
- Click through mock solver queries
- Show Arbiscan contract page
- Demonstrate query functionality

1. **Technical Deep Dive (1min)**

- Show smart contract code on GitHub
- Point out key functions (verify, isVerified, getVerification)

1. **Next Steps (30s)**

- “This testnet proves the architecture works”
- “Phase 1 funding enables audit + mainnet”
- “Encouraging GG24 appeal review”

1. **Call to Action (30s)**

- Link to GitHub repo
- Link to Giveth page
- Thank reviewers for consideration
- [ ] **Upload to YouTube (unlisted or public)**
- [ ] **Add video link to:**
  - README.md hero section
  - DEMO.md top
  - Appeal letter

-----

## Phase 6: Final Checklist

### Before Submitting Appeal

- [ ] **Verify all links work:**
  - [ ] Demo site loads
  - [ ] Arbiscan contract page shows verified code
  - [ ] GitHub repo is public
  - [ ] Video plays
- [ ] **Create screenshot assets:**
  - [ ] Demo frontend showing successful query
  - [ ] Arbiscan verified contract page
  - [ ] Architecture diagram
- [ ] **Update appeal letter with:**
  - [ ] “Since initial review, we’ve deployed to testnet…”
  - [ ] All contract addresses and links
  - [ ] Demo video link
  - [ ] Screenshot links
- [ ] **Tweet thread (optional but recommended):**
  
  ```
  🧵 VPNL testnet is live on @arbitrum Sepolia!
  
  After feedback from @gitcoin GG24, we deployed our reputation registry to show the architecture in action.
  
  Try it: [demo link]
  Contract: [arbiscan link]
  Video: [video link]
  
  [continue thread with technical details...]
  ```
- [ ] **Post in relevant Discords/Telegrams:**
  - Gitcoin community
  - Arbitrum developers
  - Any intent protocol communities

-----

## Emergency Shortcuts (If Time is Very Limited)

If you only have 1-2 days:

**Minimum Viable Demo:**

1. Deploy contract only (skip frontend) - 2 hours
1. Create mock verifications - 1 hour
1. Record 3-minute Loom walking through Arbiscan - 30 minutes
1. Update DEMO.md with contract links - 30 minutes
1. Submit appeal with “deployed but frontend in progress” - Now

**Even this minimal deployment shows:**

- ✅ Working implementation exists
- ✅ You can execute on promises
- ✅ Technical competence demonstrated
- ✅ Commitment to addressing feedback

-----

## Questions to Answer First

Before you start, tell me:

1. **Do you have a wallet with Arbitrum Sepolia ETH?** (If no, we can get it quickly)
1. **How comfortable are you with Hardhat deployments?** (We can simplify if needed)
1. **Do you want to build the React frontend or just deploy the contract?** (Contract alone might be sufficient for appeal)
1. **Timeline preference:** Full demo in 3 days or minimal deployment in 1 day?

Let me know and I’ll adjust the checklist to match your situation!​​​​​​​​​​​​​​​​