const hre = require(“hardhat”);
const fs = require(“fs”);
const path = require(“path”);

async function main() {
console.log(”\n🔍 VPNL Deployment Setup Verification”);
console.log(”=====================================\n”);

let errors = [];
let warnings = [];
let checks = 0;
let passed = 0;

// Check 1: Node version
checks++;
console.log(“1️⃣  Checking Node.js version…”);
const nodeVersion = process.version;
const majorVersion = parseInt(nodeVersion.split(’.’)[0].replace(‘v’, ‘’));
if (majorVersion >= 18) {
console.log(`   ✅ Node.js ${nodeVersion} (>= v18 required)\n`);
passed++;
} else {
console.log(`   ❌ Node.js ${nodeVersion} (v18+ required)\n`);
errors.push(“Update Node.js to v18 or higher”);
}

// Check 2: .env file exists
checks++;
console.log(“2️⃣  Checking .env configuration…”);
const envPath = path.join(__dirname, “..”, “.env”);
if (fs.existsSync(envPath)) {
console.log(”   ✅ .env file exists\n”);
passed++;
} else {
console.log(”   ❌ .env file not found\n”);
errors.push(“Create .env file: cp .env.example .env”);
}

// Check 3: Required environment variables
checks++;
console.log(“3️⃣  Checking environment variables…”);
const requiredVars = [“PRIVATE_KEY”, “ETHERSCAN_API_KEY”];
let allVarsPresent = true;

for (const varName of requiredVars) {
if (process.env[varName]) {
console.log(`   ✅ ${varName} is set`);
} else {
console.log(`   ❌ ${varName} is missing`);
allVarsPresent = false;
errors.push(`Add ${varName} to .env file`);
}
}
console.log();
if (allVarsPresent) passed++;

// Check 4: Private key format
checks++;
console.log(“4️⃣  Validating private key format…”);
if (process.env.PRIVATE_KEY) {
const pk = process.env.PRIVATE_KEY;
if (pk.startsWith(“0x”)) {
console.log(”   ⚠️  Private key has 0x prefix (should be removed)\n”);
warnings.push(“Remove 0x prefix from PRIVATE_KEY in .env”);
} else if (pk.length === 64 && /^[a-fA-F0-9]+$/.test(pk)) {
console.log(”   ✅ Private key format is valid\n”);
passed++;
} else {
console.log(”   ❌ Private key format is invalid\n”);
errors.push(“Private key must be 64 hexadecimal characters”);
}
} else {
console.log(”   ⏭️  Skipped (no private key set)\n”);
}

// Check 5: Network connectivity
checks++;
console.log(“5️⃣  Testing Arbitrum Sepolia RPC connection…”);
try {
const provider = new hre.ethers.JsonRpcProvider(
process.env.ARBITRUM_SEPOLIA_RPC_URL || “https://sepolia-rollup.arbitrum.io/rpc”
);
const blockNumber = await provider.getBlockNumber();
console.log(`   ✅ Connected! Current block: ${blockNumber}\n`);
passed++;
} catch (error) {
console.log(`   ❌ Connection failed: ${error.message}\n`);
errors.push(“Check ARBITRUM_SEPOLIA_RPC_URL or network connection”);
}

// Check 6: Wallet balance
checks++;
console.log(“6️⃣  Checking wallet balance…”);
if (process.env.PRIVATE_KEY) {
try {
const [signer] = await hre.ethers.getSigners();
const address = signer.address;
const balance = await hre.ethers.provider.getBalance(address);
const balanceEth = hre.ethers.formatEther(balance);

```
  console.log(`   Address: ${address}`);
  console.log(`   Balance: ${balanceEth} ETH`);

  if (parseFloat(balanceEth) >= 0.01) {
    console.log("   ✅ Sufficient balance for deployment\n");
    passed++;
  } else {
    console.log("   ⚠️  Low balance (need ~0.05 ETH recommended)\n");
    warnings.push("Get testnet ETH from: https://faucet.quicknode.com/arbitrum/sepolia");
    passed++;
  }
} catch (error) {
  console.log(`   ❌ Failed to check balance: ${error.message}\n`);
  errors.push("Verify private key is correct");
}
```

} else {
console.log(”   ⏭️  Skipped (no private key set)\n”);
}

// Check 7: Contracts compile
checks++;
console.log(“7️⃣  Compiling smart contracts…”);
try {
await hre.run(“compile”);
console.log(”   ✅ Contracts compiled successfully\n”);
passed++;
} catch (error) {
console.log(`   ❌ Compilation failed: ${error.message}\n`);
errors.push(“Fix contract compilation errors”);
}

// Check 8: Git repository status
checks++;
console.log(“8️⃣  Checking Git repository…”);
try {
const { execSync } = require(‘child_process’);
execSync(‘git rev-parse –git-dir’, { stdio: ‘ignore’ });

```
// Check if .env is gitignored
try {
  execSync('git check-ignore .env', { stdio: 'ignore' });
  console.log("   ✅ Git repository found");
  console.log("   ✅ .env file is properly gitignored\n");
  passed++;
} catch (e) {
  console.log("   ✅ Git repository found");
  console.log("   ⚠️  .env file might not be gitignored!\n");
  warnings.push("Ensure .env is in .gitignore to prevent committing secrets");
  passed++;
}
```

} catch (error) {
console.log(”   ⚠️  Not a Git repository (optional)\n”);
passed++;
}

// Check 9: Required directories
checks++;
console.log(“9️⃣  Checking directory structure…”);
const requiredDirs = [“contracts”, “scripts”];
let allDirsPresent = true;

for (const dir of requiredDirs) {
const dirPath = path.join(__dirname, “..”, dir);
if (fs.existsSync(dirPath)) {
console.log(`   ✅ ${dir}/ directory exists`);
} else {
console.log(`   ❌ ${dir}/ directory missing`);
allDirsPresent = false;
errors.push(`Create ${dir}/ directory`);
}
}
console.log();
if (allDirsPresent) passed++;

// Check 10: Contract file exists
checks++;
console.log(“🔟 Checking VPNLRegistry.sol…”);
const contractPath = path.join(__dirname, “..”, “contracts”, “VPNLRegistry.sol”);
if (fs.existsSync(contractPath)) {
console.log(”   ✅ VPNLRegistry.sol found\n”);
passed++;
} else {
console.log(”   ❌ VPNLRegistry.sol not found\n”);
errors.push(“Ensure VPNLRegistry.sol is in contracts/ directory”);
}

// Summary
console.log(”=====================================”);
console.log(“📊 SUMMARY”);
console.log(”=====================================\n”);

console.log(`Checks completed: ${passed}/${checks}`);
console.log();

if (warnings.length > 0) {
console.log(“⚠️  WARNINGS:”);
warnings.forEach((warning, i) => {
console.log(`  ${i + 1}. ${warning}`);
});
console.log();
}

if (errors.length > 0) {
console.log(“❌ ERRORS (must fix before deployment):”);
errors.forEach((error, i) => {
console.log(`  ${i + 1}. ${error}`);
});
console.log();
console.log(“🔧 Fix these issues and run: npm run verify:setup\n”);
process.exit(1);
} else if (warnings.length > 0) {
console.log(“✅ Setup is valid but has warnings”);
console.log(“💡 Review warnings above before deployment\n”);
console.log(“Ready to deploy? Run: npm run deploy:sepolia\n”);
process.exit(0);
} else {
console.log(“✅ All checks passed! Setup is complete.\n”);
console.log(“🚀 Ready to deploy? Run: npm run deploy:sepolia\n”);
process.exit(0);
}
}

main()
.catch((error) => {
console.error(”\n❌ Verification failed:”);
console.error(error);
process.exit(1);
});