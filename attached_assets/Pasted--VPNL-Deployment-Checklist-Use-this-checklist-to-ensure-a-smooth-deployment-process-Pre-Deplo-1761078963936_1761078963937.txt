# VPNL Deployment Checklist

Use this checklist to ensure a smooth deployment process.

## Pre-Deployment (15 minutes)

### Environment Setup

- [ ] Node.js v18+ installed (`node --version`)
- [ ] Git repository cloned
- [ ] Dependencies installed (`npm install`)
- [ ] Contracts compile successfully (`npx hardhat compile`)

### Wallet & Funding

- [ ] Testnet wallet created (or using existing testnet wallet)
- [ ] Private key extracted from wallet
- [ ] Arbitrum Sepolia ETH acquired (~0.1 ETH)
  - Faucet 1: https://faucet.quicknode.com/arbitrum/sepolia
  - Faucet 2: https://www.alchemy.com/faucets/arbitrum-sepolia
- [ ] Balance verified on Arbiscan: https://sepolia.arbiscan.io

### API Keys

- [ ] Etherscan API key obtained: https://docs.etherscan.io/
- [ ] API key activated (wait 5 minutes after creation)

### Configuration

- [ ] `.env.example` copied to `.env`
- [ ] `PRIVATE_KEY` added to `.env` (no 0x prefix)
- [ ] `ETHERSCAN_API_KEY` added to `.env`
- [ ] `.env` file is in `.gitignore` (CRITICAL!)
- [ ] No secrets committed to Git

-----

## Deployment Day (30 minutes)

### Phase 1: Contract Deployment (10 min)

- [ ] Run: `npm run deploy:sepolia`
- [ ] Deployment successful (contract address received)
- [ ] Contract verified on Arbiscan automatically
- [ ] If verification failed, run manual verification
- [ ] Save contract address from `deployments/arbitrumSepolia.json`
- [ ] Contract viewable on Arbiscan with green checkmark

**Contract Address:** `_________________________`

**Arbiscan Link:** `_________________________`

### Phase 2: Test Data Creation (5 min)

- [ ] Run: `npm run populate:testdata`
- [ ] 4 mock verifications created successfully
- [ ] Test data saved to `deployments/arbitrumSepolia-testdata.json`
- [ ] Verification confirmed on Arbiscan (query `isVerified`)

**Test Solver Addresses:**

1. Expert Alpha: `_________________________`
1. Advanced Beta: `_________________________`
1. Emerging Gamma: `_________________________`
1. Expert Delta: `_________________________`

### Phase 3: Documentation Updates (10 min)

- [ ] `DEMO.md` updated with contract address
- [ ] `DEMO.md` updated with test solver addresses
- [ ] `README.md` updated with testnet demo section
- [ ] Deployment info committed to Git
- [ ] Changes pushed to GitHub

### Phase 4: Verification (5 min)

- [ ] Open Arbiscan contract page
- [ ] Navigate to “Read Contract” tab
- [ ] Test `isVerified(address)` with test solver
- [ ] Returns `true` for verified solvers
- [ ] Returns `false` for random addresses
- [ ] Test `getVerification(address)` with test solver
- [ ] All data displays correctly

-----

## Post-Deployment (1-2 hours)

### Frontend Demo (Optional, 1 hour)

- [ ] React app created
- [ ] Ethers.js integrated
- [ ] Contract address configured
- [ ] Test solver buttons added
- [ ] Query functionality working
- [ ] Deployed to Vercel/Netlify
- [ ] Demo URL obtained

**Demo URL:** `_________________________`

### Video Walkthrough (30 minutes)

- [ ] Loom account created (free)
- [ ] Video script prepared
- [ ] Screen recording completed (5-7 min)
- [ ] Video uploaded to YouTube
- [ ] Video link obtained
- [ ] Video marked as unlisted/public

**Video URL:** `_________________________`

### Assets Creation (30 minutes)

- [ ] Screenshot: Arbiscan verified contract
- [ ] Screenshot: Successful verification transaction
- [ ] Screenshot: Read contract functions
- [ ] Screenshot: Frontend demo (if applicable)
- [ ] Architecture diagram exported

### Community Updates (30 minutes)

- [ ] Tweet thread drafted
- [ ] Telegram announcement prepared
- [ ] Discord post ready
- [ ] Giveth project page updated
- [ ] GitHub README.md reflects testnet launch

-----

## Appeal Preparation (1 hour)

### Documentation Gathering

- [ ] Contract address and Arbiscan link
- [ ] Deployment transaction hash
- [ ] Test data creation transaction hashes
- [ ] Frontend demo URL (if applicable)
- [ ] Video walkthrough URL
- [ ] Screenshots organized

### Appeal Letter Updates

- [ ] “Since initial review” section added
- [ ] All contract addresses included
- [ ] All explorer links included
- [ ] Video link embedded
- [ ] Screenshots attached or linked
- [ ] Proof of execution demonstrated

### Supporting Evidence

- [ ] Deployment timestamp documented
- [ ] Gas costs calculated
- [ ] Transaction confirmations verified
- [ ] Community feedback collected (if any)
- [ ] Ecosystem interest documented (if any)

-----

## Final Checks Before Submission

### Technical Verification

- [ ] All links work (no 404s)
- [ ] Arbiscan shows verified contract
- [ ] Test queries return expected results
- [ ] No broken images or videos
- [ ] Mobile responsiveness checked (if frontend)

### Documentation Quality

- [ ] No typos in addresses
- [ ] All dates/timestamps correct
- [ ] Professional presentation
- [ ] Clear and concise language
- [ ] Evidence well-organized

### Security Audit

- [ ] No private keys exposed anywhere
- [ ] No API keys in public repos
- [ ] `.env` not committed
- [ ] Deployment info only (no secrets)

### Submission Package

- [ ] Appeal letter finalized
- [ ] All links tested
- [ ] Screenshots embedded/attached
- [ ] Video accessible
- [ ] Supporting docs organized

-----

## Emergency Rollback Plan

If something goes wrong during deployment:

### Contract Issues

- **Problem:** Deployment fails
  - **Solution:** Check balance, RPC endpoint, gas settings
  - **Retry:** Wait 5 minutes, try again
- **Problem:** Verification fails
  - **Solution:** Use manual verification command
  - **Backup:** Verification can be done later
- **Problem:** Wrong network
  - **Solution:** Check `hardhat.config.js`, verify `--network` flag

### Data Issues

- **Problem:** Test data creation fails
  - **Solution:** Check you’re using deployer wallet
  - **Retry:** Can be run multiple times safely
- **Problem:** Transactions stuck
  - **Solution:** Increase gas price in Hardhat config
  - **Check:** Arbiscan for transaction status

### Recovery Actions

- [ ] Save all error messages
- [ ] Document what went wrong
- [ ] Check troubleshooting in SETUP.md
- [ ] Don’t panic - testnet is for testing!
- [ ] Can redeploy if needed (costs only testnet ETH)

-----

## Success Criteria

You’ve successfully completed deployment when:

✅ Contract deployed and verified on Arbiscan  
✅ Test data created (4 verified solvers)  
✅ Documentation updated with addresses  
✅ All links work and point to correct resources  
✅ Video walkthrough completed (or contract-only demo ready)  
✅ Appeal letter updated with deployment evidence

-----

## Timeline Summary

|Phase                |Duration|Can Skip?|
|---------------------|--------|---------|
|Pre-deployment setup |15 min  |No       |
|Contract deployment  |10 min  |No       |
|Test data creation   |5 min   |No       |
|Documentation updates|10 min  |No       |
|Frontend demo        |1 hour  |Yes*     |
|Video walkthrough    |30 min  |No**     |
|Assets creation      |30 min  |Partially|
|Appeal preparation   |1 hour  |No       |

* Contract alone is sufficient for appeal  
** Even a 2-minute Loom walking through Arbiscan is valuable

-----

## Minimum Viable Deployment (1 hour)

If you’re short on time, this is the bare minimum:

1. **Deploy contract** (10 min)
1. **Create test data** (5 min)
1. **Update DEMO.md** (5 min)
1. **Record 3-min Loom** showing Arbiscan (10 min)
1. **Update appeal letter** (30 min)

This proves execution capability and addresses “too early” concern.

-----

## Questions During Deployment?

1. Check SETUP.md troubleshooting section
1. Review Hardhat error messages
1. Verify balance on Arbiscan
1. Check `.env` configuration
1. Ask in Telegram: https://t.me/vpnlnetwork

-----

**Status:** [ ] Not Started  |  [ ] In Progress  |  [ ] Complete

**Deployment Date:** _______________

**Appeals Deadline:** _______________

**Notes:**

-----

-----

-----