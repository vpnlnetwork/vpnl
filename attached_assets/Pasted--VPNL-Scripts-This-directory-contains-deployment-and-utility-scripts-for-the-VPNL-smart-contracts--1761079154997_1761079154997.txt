# VPNL Scripts

This directory contains deployment and utility scripts for the VPNL smart contracts.

-----

## Available Scripts

### 1. `verify-setup.js`

**Purpose:** Validates your environment before deployment

**Usage:**

```bash
npm run verify:setup
```

**What it checks:**

- Node.js version (>= v18)
- `.env` file exists
- Required environment variables
- Private key format
- Network connectivity
- Wallet balance
- Contract compilation
- Git configuration
- Directory structure

**When to use:**

- Before first deployment
- After changing configuration
- When troubleshooting issues

-----

### 2. `deploy.js`

**Purpose:** Deploys VPNLRegistry contract to specified network

**Usage:**

```bash
# Testnet
npm run deploy:sepolia

# Mainnet (future)
npm run deploy:mainnet
```

**What it does:**

1. Validates deployer wallet and balance
1. Deploys VPNLRegistry contract
1. Sets deployer as initial verifier
1. Waits for block confirmations
1. Verifies contract on block explorer
1. Saves deployment info to `deployments/`

**Output files:**

- `deployments/arbitrumSepolia.json` - Deployment details
- Console output with all addresses and links

**Gas estimate:** ~800,000 gas (~0.001 ETH on testnet)

-----

### 3. `populate-testdata.js`

**Purpose:** Creates mock solver verifications for testing

**Usage:**

```bash
npm run populate:testdata
```

**Prerequisites:**

- Contract must be deployed first
- Must run with deployer wallet (verifier)

**What it does:**

1. Loads deployment info
1. Generates 4 mock solver verifications:
- Expert Solver Alpha (score: 0.85)
- Advanced Solver Beta (score: 0.65)
- Emerging Solver Gamma (score: 0.30)
- Expert Solver Delta (score: 0.92)
1. Creates cryptographic commitments
1. Submits verifications to contract
1. Saves test data to `deployments/`

**Output files:**

- `deployments/arbitrumSepolia-testdata.json` - Test solver details

**Gas estimate:** ~100,000 gas per verification (~400,000 total)

-----

## Deployment Workflow

**Step 1: Verify Setup**

```bash
npm run verify:setup
```

✅ Ensures environment is ready

**Step 2: Deploy Contract**

```bash
npm run deploy:sepolia
```

✅ Deploys and verifies VPNLRegistry

**Step 3: Create Test Data**

```bash
npm run populate:testdata
```

✅ Populates with sample verifications

**Step 4: Update Docs**

- Edit `DEMO.md` with contract addresses
- Update `README.md` with testnet info
- Commit deployment files to Git

-----

## Output Files

### `deployments/arbitrumSepolia.json`

Contains deployment information:

```json
{
  "network": "arbitrumSepolia",
  "chainId": 421614,
  "registry": "0x...",
  "verifier": "0x...",
  "deployer": "0x...",
  "deploymentTx": "0x...",
  "blockNumber": 12345678,
  "timestamp": "2025-01-15T12:00:00.000Z",
  "explorerUrl": "https://sepolia.arbiscan.io/address/0x..."
}
```

### `deployments/arbitrumSepolia-testdata.json`

Contains test solver information:

```json
{
  "network": "arbitrumSepolia",
  "registry": "0x...",
  "createdAt": "2025-01-15T12:05:00.000Z",
  "solvers": [
    {
      "solver": "0x742d35Cc...",
      "name": "Expert Solver Alpha",
      "tier": "Expert",
      "score": 0.85,
      "commitment": "0x9a3f2b1c...",
      "transactionHash": "0xabc123...",
      "blockNumber": 12345680,
      "expiresAt": "2025-07-14T12:05:00.000Z"
    }
  ]
}
```

-----

## Network Configuration

### Arbitrum Sepolia (Testnet)

- **Chain ID:** 421614
- **RPC:** https://sepolia-rollup.arbitrum.io/rpc
- **Explorer:** https://sepolia.arbiscan.io
- **Faucet:** https://faucet.quicknode.com/arbitrum/sepolia

### Arbitrum One (Mainnet - Future)

- **Chain ID:** 42161
- **RPC:** https://arb1.arbitrum.io/rpc
- **Explorer:** https://arbiscan.io
- **Note:** Only deploy after audit completion

-----

## Environment Variables

Required in `.env`:

```bash
# Your wallet's private key (NO 0x prefix!)
PRIVATE_KEY=abc123def456...

# Etherscan API key (works for Arbiscan)
ETHERSCAN_API_KEY=YOUR_KEY_HERE

# Optional: Custom RPC endpoints
ARBITRUM_SEPOLIA_RPC_URL=https://sepolia-rollup.arbitrum.io/rpc
ARBITRUM_ONE_RPC_URL=https://arb1.arbitrum.io/rpc
```

-----

## Manual Verification

If automatic verification fails during deployment:

```bash
# Get contract address from deployments/arbitrumSepolia.json
# Get verifier address (same as deployer)

npx hardhat verify --network arbitrumSepolia \
  <CONTRACT_ADDRESS> \
  <VERIFIER_ADDRESS>
```

**Example:**

```bash
npx hardhat verify --network arbitrumSepolia \
  0x1234567890abcdef1234567890abcdef12345678 \
  0xabcdef1234567890abcdef1234567890abcdef12
```

-----

## Testing Deployed Contracts

### Via Hardhat Console

```bash
npx hardhat console --network arbitrumSepolia
```

```javascript
// Load contract
const registry = await ethers.getContractAt(
  "VPNLRegistry", 
  "0xYOUR_CONTRACT_ADDRESS"
);

// Query verifier
await registry.verifier();

// Check if address is verified
await registry.isVerified("0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb1");

// Get full verification details
await registry.getVerification("0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb1");
```

### Via Arbiscan

1. Visit contract page: `https://sepolia.arbiscan.io/address/<CONTRACT_ADDRESS>`
1. Click “Contract” tab
1. Click “Read Contract”
1. Try functions:
- `isVerified` - Check if address is verified
- `getVerification` - Get full verification details
- `verifier` - See who can verify solvers

-----

## Gas Costs (Estimates)

On Arbitrum Sepolia (values will vary):

|Operation           |Gas Used      |Estimated Cost |
|--------------------|--------------|---------------|
|Deploy Contract     |~800,000      |~0.001 ETH     |
|Single Verification |~100,000      |~0.0001 ETH    |
|4 Test Verifications|~400,000      |~0.0005 ETH    |
|**Total Deployment**|**~1,200,000**|**~0.0015 ETH**|

**Recommendation:** Have at least 0.05 ETH for safety margin

-----

## Troubleshooting

### Deployment Fails

**Error: “Insufficient funds”**

- Check balance: `https://sepolia.arbiscan.io/address/YOUR_ADDRESS`
- Get testnet ETH from faucet
- Need at least 0.01 ETH

**Error: “Network error”**

- Check internet connection
- Try alternative RPC in `.env`:
  
  ```bash
  ARBITRUM_SEPOLIA_RPC_URL=https://arb-sepolia.g.alchemy.com/v2/YOUR_KEY
  ```

**Error: “Nonce too high”**

- Transaction might have succeeded already
- Check Arbiscan for your address
- Try: `npx hardhat clean`

### Verification Fails

**Error: “Already Verified”**

- This is good! Verification succeeded
- Ignore the “error”

**Error: “ETHERSCAN_API_KEY invalid”**

- Wait 5 minutes after creating key
- Check for typos in `.env`
- Verify key at: https://docs.etherscan.io/

**Error: “Could not verify contract”**

- Run manual verification command
- Wait 1 minute and try again
- Check network is correct

### Test Data Creation Fails

**Error: “Only verifier can call”**

- Must use same wallet that deployed contract
- Verify with: `cat deployments/arbitrumSepolia.json`
- Check `verifier` field matches your address

**Error: “Contract not found”**

- Deployment might have failed
- Check `deployments/` directory exists
- Redeploy if needed

**Error: “Already verified”**

- Some solvers already have verifications
- This is safe to ignore
- Script will skip them

-----

## Best Practices

### Security

- ✅ Never commit `.env` file
- ✅ Use separate testnet wallet
- ✅ Verify `.env` is in `.gitignore`
- ✅ Double-check addresses before mainnet
- ✅ Test on Sepolia first

### Deployment

- ✅ Run `verify:setup` before deployment
- ✅ Save all addresses immediately
- ✅ Verify contract on explorer
- ✅ Test with sample queries
- ✅ Commit deployment files to Git

### Documentation

- ✅ Update DEMO.md with addresses
- ✅ Update README.md with links
- ✅ Keep screenshots of explorer
- ✅ Document any issues encountered
- ✅ Share deployment info with team

-----

## Script Development

### Adding New Scripts

1. Create script in `scripts/` directory
1. Add to `package.json` scripts section
1. Follow existing patterns:
- Use `hre` for Hardhat
- Load from `deployments/` directory
- Save results to `deployments/`
- Provide clear console output
- Handle errors gracefully

### Testing Scripts Locally

```bash
# Use Hardhat's built-in test network
npx hardhat node

# In another terminal, deploy to local network
npx hardhat run scripts/deploy.js --network localhost
```

-----

## Common Tasks

### Redeploy Everything

```bash
# Clean previous artifacts
npm run clean

# Recompile
npm run compile

# Deploy fresh
npm run deploy:sepolia

# Create new test data
npm run populate:testdata
```

### Check Deployment Status

```bash
# View deployment info
cat deployments/arbitrumSepolia.json

# View test data
cat deployments/arbitrumSepolia-testdata.json

# Or use jq for pretty printing
cat deployments/arbitrumSepolia.json | jq .
```

### Update Verifier Address

```bash
npx hardhat console --network arbitrumSepolia
```

```javascript
const registry = await ethers.getContractAt("VPNLRegistry", "0xYOUR_ADDRESS");
await registry.updateVerifier("0xNEW_VERIFIER_ADDRESS");
```

-----

## Next Steps After Deployment

1. ✅ **Update Documentation**
- Edit `DEMO.md` with contract addresses
- Update `README.md` testnet section
- Add links to Arbiscan
1. ✅ **Create Demo Video**
- Record Loom walkthrough
- Show contract on Arbiscan
- Demo query functions
1. ✅ **Test Integration**
- Try queries via Arbiscan
- Test with frontend (if built)
- Verify all functions work
1. ✅ **Share Results**
- Update Giveth project page
- Tweet deployment announcement
- Post in Discord/Telegram
1. ✅ **Prepare Appeal**
- Include all contract links
- Add video and screenshots
- Demonstrate execution

-----

## Support

Questions about scripts? Check:

1. **SETUP.md** - Full deployment guide
1. **DEPLOYMENT_CHECKLIST.md** - Step-by-step checklist
1. **QUICK_DEPLOY.md** - TL;DR version
1. **Telegram** - https://t.me/vpnlnetwork

-----

## Script Maintenance

These scripts are maintained as part of the VPNL project.

**Report issues:**

- GitHub Issues: https://github.com/vpnlnetwork/vpnl/issues
- Telegram: https://t.me/vpnlnetwork

**Contributions welcome:**

- Fork the repository
- Make improvements
- Submit pull request

-----

**Last Updated:** January 2025  
**Version:** 1.0.0  
**License:** MIT